---
- name: Restart Airflow Services
  hosts: airflow_servers
  become: yes
  gather_facts: no

  tasks:
    - name: Check current Airflow service status
      systemd:
        name: airflow
      register: current_status

    - name: Display current status
      debug:
        msg: "Current Airflow service status: {{ current_status.status.ActiveState }}"

    - name: Stop Airflow systemd service if running
      systemd:
        name: airflow
        state: stopped
        daemon_reload: yes
      when: current_status.status.ActiveState == 'active'
      register: stop_result

    - name: Ensure all containers are stopped
      shell: |
        cd {{ airflow_project_dir }} && docker compose down --remove-orphans
      become: yes
      become_user: airflow
      register: container_stop_result

    - name: Wait a moment for cleanup
      wait_for:
        timeout: 10

    - name: Start Airflow systemd service
      systemd:
        name: airflow
        state: started
        daemon_reload: yes
      register: start_result

    - name: Display start result
      debug:
        msg: "Airflow service started successfully"
      when: start_result.changed

    - name: Wait for services to be ready
      wait_for:
        timeout: 60

    - name: Check Airflow service status
      systemd:
        name: airflow
      register: service_status

    - name: Display final service status
      debug:
        msg: "Airflow service is {{ 'running' if service_status.status.ActiveState == 'active' else 'not running' }}"

    - name: Check container status
      shell: |
        cd {{ airflow_project_dir }} && docker compose ps
      become: yes
      become_user: airflow
      register: container_status
      ignore_errors: yes

    - name: Display container status
      debug:
        var: container_status.stdout_lines
      when: container_status.rc == 0

    - name: Verify restart success
      debug:
        msg: "âœ… Airflow services have been restarted successfully"
      when: service_status.status.ActiveState == 'active' and "'Up'" in container_status.stdout 